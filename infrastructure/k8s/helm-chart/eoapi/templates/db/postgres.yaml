#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: pgdata-configmap
#data:
#  countries: |
#  {{- $.Files.Get .Values.db.sql.countries | nindent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgstac-env-configmap
data:
  {{- range $envKey, $envValue := .Values.db.settings.envVars }}
  {{ upper $envKey }}: "{{ $envValue }}"
  {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pgstac
  name: pgstac
spec:
  ports:
  - name: "5432"
    port: 5432
    targetPort: 5432
  selector:
    app: pgstac
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgstac-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgstac
  labels:
    app: pgstac
spec:
  selector:
    matchLabels:
      app: pgstac
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: pgstac
    spec:
      restartPolicy: Always
      containers:
        - name: pgstac
          image: ghcr.io/stac-utils/pgstac:v0.7.1
          args:
            - "postgres"
            - "-N"
            - "500"
          env:
            # NOTE: there's no reason we need to use a `ConfigMap` here to get os env vars into the pod.
            # we could just template them out here immediately with `value: $_` but this allows us
            # to store them in k8s intermediately and change them and then bounce deploys if needed
            {{- range $envKey, $_ := .Values.db.settings.envVars }}
            - name: {{ upper $envKey }}
              valueFrom:
                configMapKeyRef:
                  name: pgstac-env-configmap
                  key: {{ upper $envKey }}
            {{- end }}
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: pgstac-claim
      volumes:
        - name: pgstac-claim
          persistentVolumeClaim:
            claimName: pgstac-claim
