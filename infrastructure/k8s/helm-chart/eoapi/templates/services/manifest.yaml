{{- range $serviceName, $v := .Values -}}
{{- if (or (eq $serviceName "raster") (eq $serviceName "stac") (eq $serviceName "vector")) }}
{{- if index $v "enabled" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $serviceName }}-envvar-configmap
data:
  {{- range $envKey, $envValue := index $v "settings" "envVars" }}
  {{ upper $envKey }}: "{{ $envValue }}"
  {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ $serviceName }}
    gitsha: {{ $.Values.gitSha }}
  name: {{ $serviceName }}
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ $serviceName }}
  template:
    metadata:
      labels:
        app: {{ $serviceName }}
    spec:
      containers:
      - image: {{ index $v "image" "name" }}:{{ index $v "image" "tag" }}
        name: {{ $serviceName }}
        ports:
          - containerPort: {{ $.Values.service.port }}
        resources:
          limits:
            cpu: {{ index $v "settings" "resources" "limits" "cpu" }}
            memory: {{ index $v "settings" "resources" "limits" "memory" }}
          requests:
            cpu: {{ index $v "settings" "resources" "requests" "cpu" }}
            memory: {{ index $v "settings" "resources" "requests" "memory" }}
        envFrom:
          # NOTE: there's no reason we need to use a `ConfigMap` or `Secret` here to get os env vars into the pod.
          # we could just template them out here immediately with `value: $_` but this allows us
          # to store them in k8s intermediately and change them and then bounce deploys if needed
        - secretRef:
            name: pgstac-secrets
        - configMapRef:
            name: {{ $serviceName }}-envvar-configmap
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: {{ $serviceName }}
  name: {{ $serviceName }}
spec:
  type: {{ $.Values.service.port_type }}
  ports:
  - name: '{{ $.Values.service.port }}'
    port: {{ $.Values.service.port }}
    targetPort: {{ $.Values.service.port }}
  selector:
    app: {{ $serviceName }}
---
{{- if (eq $.Values.service.port_type "NodePort") }}
{{- if semverCompare ">=1.19-0" $.Capabilities.KubeVersion.GitVersion -}}
apiVersion: networking.k8s.io/v1
{{- else if semverCompare ">=1.14-0" $.Capabilities.KubeVersion.GitVersion -}}
apiVersion: networking.k8s.io/v1beta1
{{- else -}}
apiVersion: extensions/v1beta1
{{- end }}
kind: Ingress
metadata:
  name: {{ $serviceName }}
  {{- with $.Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if $.Values.ingress.enable_shared_ingress }}
    alb.ingress.kubernetes.io/group.name: shared-ingress
  {{- end }}
spec:
  {{- if (and ($.Values.ingress.className) (semverCompare ">=1.18-0" $.Capabilities.KubeVersion.GitVersion)) }}
  ingressClassName: {{ $.Values.ingress.className }}
  {{- end }}
  rules:
    - http:
        paths:
          - pathType: Prefix
            {{- if $.Values.ingress.enable_shared_ingress }}
            path: "/{{ $serviceName }}"
            {{ else }}
            path: "/"
            {{- end }}
            backend:
              service:
                name: {{ $serviceName }}
                port:
                  number: {{ $.Values.service.port }}
---
{{/* END: if .Values.service.port_type */}}
{{- end }}
{{/* END: if index $v "enabled" */}}
{{- end }}
{{/* END: if (or (eq $serviceName "raster") (eq $serviceName "stac") (eq $serviceName "vector")) */}}
{{- end }}
{{/* END: range $serviceName, $v := .Values*/}}
{{- end }}
