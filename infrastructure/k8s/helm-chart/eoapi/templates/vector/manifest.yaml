{{- if .Values.vector.enabled -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-configmap
data:
  {{- range $envKey, $envValue := .Values.vector.settings.envVars }}
  {{ upper $envKey }}: "{{ $envValue }}"
  {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vector-{{ .Values.gitSha }}
  name: vector-{{ .Values.gitSha }}
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: vector-{{ .Values.gitSha }}
  template:
    metadata:
      labels:
        app: vector-{{ .Values.gitSha }}
    spec:
      containers:
      - image: {{ .Values.vector.image.name }}:{{ .Values.vector.image.tag }}
        name: vector
        ports:
          - containerPort: 8080
        resources:
          limits:
            cpu: {{ .Values.vector.settings.resources.limits.cpu }}
            memory: {{ .Values.vector.settings.resources.limits.memory }}
          requests:
            cpu: {{ .Values.vector.settings.resources.requests.cpu }}
            memory: {{ .Values.vector.settings.resources.requests.memory }}
        env:
          # NOTE: there's no reason we need to use a `ConfigMap` here to get os env vars into the pod.
          # we could just template them out here immediately with `value: $_` but this allows us
          # to store them in k8s intermediately and change them and then bounce deploys if needed
          {{- range $envKey, $_ := .Values.vector.settings.envVars }}
          - name: {{ upper $envKey }}
            valueFrom:
              configMapKeyRef:
                name: vector-configmap
                key: {{ upper $envKey }}
          {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vector-{{ .Values.gitSha }}
  name: vector
spec:
  type: 'NodePort'
  ports:
  - name: "8080"
    port: 8080
    targetPort: 8080
  selector:
    app: vector-{{ .Values.gitSha }}
{{- end }}
